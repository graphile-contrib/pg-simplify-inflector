type Animal implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """Reads a single `Dog` that is related to this `Animal`."""
  dogById: Dog

  """Reads and enables pagination through a set of `Dog`."""
  dogsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DogCondition
  ): DogsConnection! @deprecated(reason: "Please use dogById instead")
}

"""
A condition to be used against `Animal` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AnimalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `Animal`"""
input AnimalInput {
  id: Int
}

"""
Represents an update to a `Animal`. Fields that are set will be updated.
"""
input AnimalPatch {
  id: Int
}

"""A connection to a list of `Animal` values."""
type AnimalsConnection {
  """A list of `Animal` objects."""
  nodes: [Animal]!

  """
  A list of edges which contains the `Animal` and cursor to aid in pagination.
  """
  edges: [AnimalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Animal` you could get from the connection."""
  totalCount: Int!
}

"""A `Animal` edge in the connection."""
type AnimalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Animal` at the end of the edge."""
  node: Animal
}

"""Methods to use when ordering `Animal`."""
enum AnimalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Animal` mutation."""
input CreateAnimalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Animal` to be created by this mutation."""
  animal: AnimalInput!
}

"""The output of our create `Animal` mutation."""
type CreateAnimalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Animal` that was created by this mutation."""
  animal: Animal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Animal`. May be used by Relay 1."""
  animalEdge(
    """The method to use when ordering `Animal`."""
    orderBy: [AnimalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnimalsEdge
}

"""All input for the create `Dog` mutation."""
input CreateDogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dog` to be created by this mutation."""
  dog: DogInput!
}

"""The output of our create `Dog` mutation."""
type CreateDogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dog` that was created by this mutation."""
  dog: Dog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Animal` that is related to this `Dog`."""
  animalById: Animal

  """An edge for our `Dog`. May be used by Relay 1."""
  dogEdge(
    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DogsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteAnimalById` mutation."""
input DeleteAnimalByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAnimal` mutation."""
input DeleteAnimalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Animal` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Animal` mutation."""
type DeleteAnimalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Animal` that was deleted by this mutation."""
  animal: Animal
  deletedAnimalId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Animal`. May be used by Relay 1."""
  animalEdge(
    """The method to use when ordering `Animal`."""
    orderBy: [AnimalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnimalsEdge
}

"""All input for the `deleteDogById` mutation."""
input DeleteDogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteDog` mutation."""
input DeleteDogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dog` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Dog` mutation."""
type DeleteDogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dog` that was deleted by this mutation."""
  dog: Dog
  deletedDogId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Animal` that is related to this `Dog`."""
  animalById: Animal

  """An edge for our `Dog`. May be used by Relay 1."""
  dogEdge(
    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DogsEdge
}

type Dog implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """Reads a single `Animal` that is related to this `Dog`."""
  animalById: Animal
}

"""
A condition to be used against `Dog` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DogCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `Dog`"""
input DogInput {
  id: Int!
}

"""Represents an update to a `Dog`. Fields that are set will be updated."""
input DogPatch {
  id: Int
}

"""A connection to a list of `Dog` values."""
type DogsConnection {
  """A list of `Dog` objects."""
  nodes: [Dog]!

  """
  A list of edges which contains the `Dog` and cursor to aid in pagination.
  """
  edges: [DogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dog` you could get from the connection."""
  totalCount: Int!
}

"""A `Dog` edge in the connection."""
type DogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dog` at the end of the edge."""
  node: Dog
}

"""Methods to use when ordering `Dog`."""
enum DogsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Animal`."""
  createAnimal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAnimalInput!
  ): CreateAnimalPayload

  """Creates a single `Dog`."""
  createDog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDogInput!
  ): CreateDogPayload

  """Updates a single `Animal` using its globally unique id and a patch."""
  updateAnimal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnimalInput!
  ): UpdateAnimalPayload

  """Updates a single `Animal` using a unique key and a patch."""
  updateAnimalById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnimalByIdInput!
  ): UpdateAnimalPayload

  """Updates a single `Dog` using its globally unique id and a patch."""
  updateDog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDogInput!
  ): UpdateDogPayload

  """Updates a single `Dog` using a unique key and a patch."""
  updateDogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDogByIdInput!
  ): UpdateDogPayload

  """Deletes a single `Animal` using its globally unique id."""
  deleteAnimal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnimalInput!
  ): DeleteAnimalPayload

  """Deletes a single `Animal` using a unique key."""
  deleteAnimalById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnimalByIdInput!
  ): DeleteAnimalPayload

  """Deletes a single `Dog` using its globally unique id."""
  deleteDog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDogInput!
  ): DeleteDogPayload

  """Deletes a single `Dog` using a unique key."""
  deleteDogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDogByIdInput!
  ): DeleteDogPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Animal`."""
  allAnimals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Animal`."""
    orderBy: [AnimalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnimalCondition
  ): AnimalsConnection

  """Reads a set of `Animal`."""
  allAnimalsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Animal`."""
    orderBy: [AnimalsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnimalCondition
  ): [Animal!]

  """Reads and enables pagination through a set of `Dog`."""
  allDogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DogCondition
  ): DogsConnection

  """Reads a set of `Dog`."""
  allDogsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DogCondition
  ): [Dog!]
  animalById(id: Int!): Animal
  dogById(id: Int!): Dog

  """Reads a single `Animal` using its globally unique `ID`."""
  animal(
    """The globally unique `ID` to be used in selecting a single `Animal`."""
    nodeId: ID!
  ): Animal

  """Reads a single `Dog` using its globally unique `ID`."""
  dog(
    """The globally unique `ID` to be used in selecting a single `Dog`."""
    nodeId: ID!
  ): Dog
}

"""All input for the `updateAnimalById` mutation."""
input UpdateAnimalByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Animal` being updated.
  """
  animalPatch: AnimalPatch!
  id: Int!
}

"""All input for the `updateAnimal` mutation."""
input UpdateAnimalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Animal` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Animal` being updated.
  """
  animalPatch: AnimalPatch!
}

"""The output of our update `Animal` mutation."""
type UpdateAnimalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Animal` that was updated by this mutation."""
  animal: Animal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Animal`. May be used by Relay 1."""
  animalEdge(
    """The method to use when ordering `Animal`."""
    orderBy: [AnimalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnimalsEdge
}

"""All input for the `updateDogById` mutation."""
input UpdateDogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Dog` being updated.
  """
  dogPatch: DogPatch!
  id: Int!
}

"""All input for the `updateDog` mutation."""
input UpdateDogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Dog` being updated.
  """
  dogPatch: DogPatch!
}

"""The output of our update `Dog` mutation."""
type UpdateDogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dog` that was updated by this mutation."""
  dog: Dog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Animal` that is related to this `Dog`."""
  animalById: Animal

  """An edge for our `Dog`. May be used by Relay 1."""
  dogEdge(
    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DogsEdge
}
